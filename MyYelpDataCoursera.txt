Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 537 (user_id)
ix. User = 10000
x. Friend = 11 
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	No 

	SQL code used to arrive at answer:

SELECT COUNT(*)
  	FROM user
		WHERE id IS NULL OR 
		  name IS NULL OR 
		  review_count IS NULL OR 
		  yelping_since IS NULL OR
		  useful IS NULL OR 
		  funny IS NULL OR 
		  cool IS NULL OR 
		  fans IS NULL OR 
		  average_stars IS NULL OR 
		  compliment_hot IS NULL OR 
		  compliment_more IS NULL OR 
		  compliment_profile IS NULL OR 
		  compliment_cute IS NULL OR 
		  compliment_list IS NULL OR 
		  compliment_note IS NULL OR 
		  compliment_plain IS NULL OR 
		  compliment_cool IS NULL OR 
		  compliment_funny IS NULL OR 
		  compliment_writer IS NULL OR 
		  compliment_photos IS NULL

	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

SELECT
  city,
  SUM(review_count) AS reviews
FROM business
GROUP BY city
ORDER BY reviews DESC
	
	Copy and Paste the Result Below:

+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT
  stars,
  SUM(review_count) AS count
FROM business
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+-------+
| stars | count |
+-------+-------+
|   1.5 |    10 |
|   2.5 |     6 |
|   3.5 |    88 |
|   4.0 |    21 |
|   4.5 |    31 |
|   5.0 |     3 |
+-------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT
  stars,
  SUM(review_count) AS count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+-------+
| stars | count |
+-------+-------+
|   2.0 |     8 |
|   2.5 |     3 |
|   3.0 |    11 |
|   3.5 |     6 |
|   4.0 |    69 |
|   4.5 |    17 |
|   5.0 |    23 |
+-------+-------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT name,
       review_count 
FROM user 
ORDER BY review_count DESC
limit 3	
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+


8. Does posing more reviews correlate with more fans?

No, not necessarily. More reviews doesnt always mean fans. 

	Please explain your findings and interpretation of the results:
	
SELECT name, 
       review_count,
       fans
FROM user 
ORDER BY fans DESC
limit 15

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
+-----------+--------------+------+
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

More reviews with word "love" in it. 
+-----------+-----------+
| love_text | hate_text |
+-----------+-----------+
|      1780 |       232 |
+-----------+-----------+

	SQL code used to arrive at answer:

SELECT (SELECT
         COUNT(text)
       FROM review
       WHERE text LIKE "%love%")
       AS love_text,

       (SELECT
         COUNT(text)
       FROM review
       WHERE text LIKE "%hate%")
       AS hate_text	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT name
, 
       fans 
FROM user 

ORDER BY fans DESC

limit 10	
	
	Copy and Paste the Result Below:

+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:

SELECT name, 
       
	fans, 
   
	useful, 
	funny

FROM user 

ORDER BY fans DESC

limit 15
	
	Copy and Paste the Result Below:

+-----------+------+--------+--------+
| name      | fans | useful |  funny |
+-----------+------+--------+--------+
| Amy       |  503 |   3226 |   2554 |
| Mimi      |  497 |    257 |    138 |
| Harald    |  311 | 122921 | 122419 |
| Gerald    |  253 |  17524 |   2324 |
| Christine |  173 |   4834 |   6646 |
| Lisa      |  159 |     48 |     13 |
| Cat       |  133 |   1062 |    672 |
| William   |  126 |   9363 |   9361 |
| Fran      |  124 |   9851 |   7606 |
| Lissa     |  120 |    455 |    150 |
| Mark      |  115 |   4008 |    570 |
| Tiffany   |  111 |   1366 |    984 |
| bernice   |  105 |    120 |    112 |
| Roanna    |  104 |   2995 |   1188 |
| Angela    |  101 |    158 |    164 |
+-----------+------+--------+--------+
	
	Please explain your findings and interpretation of the results:
	
There is a "medium relationship" between number of fans and useful as well as number of fans and funny. 
There are many points which do not specifically follow this, however there is a gradual change as the number of fans decrease, hence a medium relationship. 
	
--x--x--x--

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code. 
	
i. Do the two groups you chose to analyze have a different distribution of hours?
-> The hour timings for the high star rated group is shorter as compared to the daily timings for the lower rated businesses in general. 

ii. Do the two groups you chose to analyze have a different number of reviews?
         
-> The number of reviews for the of the two groups are almost the same except for few particular names. 
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
-> Low rated business are located in the neighbourhood with postal code 89121 and 89103 while high rated business are located in areas with postcode 89161. 
However there are many business from each group in different localities. 

SQL code used for analysis:

SELECT
  b.name,
  b.review_count,
  b.stars,
  c.category,
  h.hours,
  postal_code
FROM business b
JOIN category c
  ON b.id = c.business_id
JOIN hours h
  ON b.id = h.business_id
WHERE b.city = 'Las Vegas'
GROUP BY category
ORDER BY stars DESC
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
Average Review count for the closed businesses has a lower value (23.1980263158) as compared to review count average for open businesses (31.7570754717)	
     
ii. Difference 2:
         
Average star ratings of the closed business are lesser than the businesses that are open. 
+---------------------+-------------------+-------------------+---------------+---------+
| COUNT(DISTINCT(id)) | AVG(review_count) | SUM(review_count) |    AVG(stars) | is_open |
+---------------------+-------------------+-------------------+---------------+---------+
|                1520 |     23.1980263158 |             35261 | 3.52039473684 |       0 |
|                8480 |     31.7570754717 |            269300 | 3.67900943396 |       1 |
+---------------------+-------------------+-------------------+---------------+---------+         
         
SQL code used for analysis:

SELECT
  COUNT(DISTINCT (id)),
  AVG(review_count),
  SUM(review_count),
  AVG(stars),
  is_open
FROM business
GROUP BY is_open	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
I will be trying to parse the 'text' given in the 'review' table and model an algorithm that rates the business based on specific keywords used in the text.          
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
Well what we first do is make a list of keywords used to identify the type of review given by a specific customer to a specific business. This is a commonn technique that is applied to a variety of fields. For example, we can use this algorithm to search for number of hate tweets or sympathy tweets for a specific person or group. Using the same concept, we list down certain keywords like 
5 star: Excellent, recommended, great, love, fantastic, best, beautiful
4 star: Delicious
3 star: Good
2 star: unimpressed, okay
1 star: bad, poor
Other: rest
We can a make a column using this and then try to compare it with the actual reviews given by the specific person.                           
                  
iii. Output of your finished dataset:
We can see that the algorithm works decently. On comparing the reviews our algorithm got vs. the actual reviews, we do see a lot of similarities. Thus the algorithm worked but however do requires tweeking and modifications. 
+-----------------------------------+-------+----------+
| name                              | stars | textstar |
+-----------------------------------+-------+----------+
| Hardee's                          |     5 | 4 star   |
| My Biz Niche                      |     5 | 5 star   |
| Vegas Uncork'd: The Grand Tasting |     5 | 5 star   |
| Belmont Cleaners and Laundry      |     5 | 5 star   |
| Jimmy Johns                       |     5 | other    |
| Impressions Tile & Marble         |     5 | other    |
| Shafa Medical Clinic              |     5 | other    |
| Fit4Less                          |     5 | other    |
| Neubert Painting                  |     4 | 3 star   |
| Fiesta Ranchera                   |     4 | 4 star   |
| Showtime Tours                    |     4 | 5 star   |
| China Restaurant                  |     3 | 5 star   |
| BCT Flooring and Showers          |     2 | 2 star   |
| Arizona Goldendoodles             |     1 | 3 star   |
+-----------------------------------+-------+----------+     
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
  b.name,
  r.stars,
  CASE
    WHEN r.text LIKE "%great%" OR
      "%recommend%" OR
      "%excellent%" OR
      "%love%" OR
      "%fantastic%" OR
      "%best%" OR
      "%beautiful%" THEN '5 star'
    WHEN r.text LIKE "%delicious%" THEN '4 star'
    WHEN r.text LIKE "%good%" THEN '3 star'
    WHEN r.text LIKE "%unimpressed%" OR
      "%okay%" THEN '2 star'
    WHEN r.text LIKE "%bad%" OR
      "%poor%" THEN '1 star'
    ELSE 'other'
  END textstar
FROM business b
JOIN review r
  ON b.id = r.id
ORDER BY r.stars DESC, textstar 

--x--x--x--

PART 2: INFERENCES AND ANALYSIS

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?
Generally, yes. Even though both categories (2-3, 4-5 stars) for bars in Toronto have close closing hours, but the opening hours for the bars with lover rating is 11am, compared to the only-dinner/late lunch hours service for the restaurants in higher rating category.
**I was more interested in closing hours for the both categories at first and it was my hypothesis that closing hours actually might affect the rating, however, after running the query it turned out, that the main difference in the hours lays in the opening hours, which was very unexpected for me.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
        Yes, restaurants with lower star rating generally have more reviews, compared to the restaurants with higher rating. 

ii.	Are you able to infer anything from the location data provided between these two groups? Explain.
No.

SQL code used for analysis:

select h.hours
      ,b.review_count
      ,c.category
      ,case
      when stars between '2' and '3' then '2_3_r'
      when stars between '4' and '5' then '4_5_r'
      else 'other'
      end stars_rating
      ,case
      when hours like '%21:00' then '9'
      when hours like '%24:00' then '12'
      when hours like '%1:00' then '1'
      when hours like '%2:00' then '2'
            else '0'
      end hours_days
  from business as b inner join category as C on C.business_id=b.id
                 inner join hours as  H on H.business_id=b.id
  where b.city='Toronto' 
        and c.category='Bars'
    Order by review_count asc;

		
		

 
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
+------------+---------------+-------------------+---------+
| count (id) |    avg(stars) | sum(review_count) | is_open |
+------------+---------------+-------------------+---------+
|       8480 | 3.67900943396 |            269300 |       1 |
|       1520 | 3.52039473684 |             35261 |       0 |
+------------+---------------+-------------------+---------+
i. Difference 1:
         As we can see from results, open restaurants have significantly more reviews compared to closed businesses.
         (269300 reviews compared to 35261 of the closed one).
ii. Difference 2:
         Moreover, open restaurants have higher average rating (stars), 3.67 average stars for open restaurants compared to the 3.5204 for the closed one. 
         
         
SQL code used for analysis:

		select 	count (id)
			,avg(stars)
			,sum(review_count)
			,is_open
		from business
		group by is_open
		order by is_open desc;
	
 
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
         I decided to rank the cities with the most number of 4-5 stars rating.

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
           In order to see the rating for the bars in each city from data base we will need the information about the cities, the data on ratings and stars submitted, and information on the category of the business we will use. Moreover, in real life we would also need the information of the rest of the stars distribution, information on the size of the ciry, population and number of businesses overall, as we cant compare let’s say new York and some smaller cities, as distribution will be different. 
                  
iii. Output of your finished dataset:
         
+-------------+--------------+----------+--------------+
| city        | review_count | category | stars_rating |
+-------------+--------------+----------+--------------+
| Toronto     |           26 | Bars     | 4_5_r        |
| Peninsula   |           42 | Bars     | 4_5_r        |
| Chandler    |           75 | Bars     | 3_4_r        |
| Toronto     |           10 | Bars     | 3_4_r        |
| Phoenix     |          431 | Bars     | 3_4_r        |
| Las Vegas   |          105 | Bars     | 3_4_r        |
| Toronto     |           15 | Bars     | 3_4_r        |
| Mesa        |          129 | Bars     | 3_4_r        |
| Medina      |           94 | Bars     | 3_4_r        |
| Westlake    |          105 | Bars     | 3_4_r        |
| Toronto     |           35 | Bars     | 2_3_r        |
| Coraopolis  |            3 | Bars     | 2_3_r        |
| Phoenix     |           60 | Bars     | 2_3_r        |
| Hudson      |            5 | Bars     | 2_3_r        |
| Chandler    |          141 | Bars     | 2_3_r        |
| Montréal    |           19 | Bars     | 2_3_r        |
| Mississauga |           27 | Bars     | 2_3_r        |
+-------------+--------------+----------+--------------+
         
iv. Provide the SQL code you used to create your final dataset:

select city
         ,b.review_count
         ,c.category
          ,case
      when stars between '2' and '3' then '2_3_r'
      when stars between '3' and '4' then '3_4_r'
      when stars between '4' and '5' then '4_5_r'
      else 'other'
      end stars_rating
From business as b inner join category as C on C.business_id=b.id                 
Where  c.category='Bars'
Order by stars_rating desc;
